<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>axdmdyj</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-09T18:02:25.842Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>coderLyj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法60天训练–9-8-day3</title>
    <link href="http://example.com/2023/09/10/%E7%AE%97%E6%B3%9560%E5%A4%A9%E8%AE%AD%E7%BB%83%E2%80%939-8-day3/"/>
    <id>http://example.com/2023/09/10/%E7%AE%97%E6%B3%9560%E5%A4%A9%E8%AE%AD%E7%BB%83%E2%80%939-8-day3/</id>
    <published>2023-09-09T16:10:53.000Z</published>
    <updated>2023-09-09T18:02:25.842Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="算法60天训练–9-8-day3"><a href="#算法60天训练–9-8-day3" class="headerlink" title="算法60天训练–9-8-day3"></a>算法60天训练–9-8-day3</h1><p>(画图有些不规范)</p><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">203. 移除链表元素</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先删除一个链表元素,无非就是将要删除的链表结点的上一个结点指向这个被删除链表的下一个结点</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309100201082.png" alt="image-20230910001923370"></p><p>这里在刚开始将<code>cur = dummy_head</code>,是为了将删除头结点的操作和其他结点的操作统一</p><p>即永远操作的结点都为<code>cur-&gt;next</code></p><p>直到为空,在这个过程中找到要被删除的结点,执行删除操作</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度: O(n)</li><li>空间复杂度: O(1)</li></ul><h3 id="Code-JAVA"><a href="#Code-JAVA" class="headerlink" title="Code(JAVA)"></a>Code(JAVA)</h3><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy_Node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy_Node.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy_Node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next.val == val)</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            <span class="keyword">else</span> cur  = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy_Node.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a><a href="https://leetcode.cn/problems/design-linked-list/description/">707. 设计链表</a></h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>这是一个比较综合的题目</p><h4 id="get-int-index"><a href="#get-int-index" class="headerlink" title="get(int index)"></a>get(int index)</h4><p>这个跟其他链表元素有区别,将<code>cur = dummyhead-&gt;next</code> 是为了解决index等于0的情况,避免没有进入while循环而造成直接返回return cur-&gt;val; </p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309100201448.png" alt="image-20230910004751733"></p><h4 id="addAtHead-int-val"><a href="#addAtHead-int-val" class="headerlink" title="addAtHead(int val)"></a>addAtHead(int val)</h4><p>在 链表头插入时要注意顺序问题</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309100201800.png" alt="image-20230910004921808"></p><h4 id="addAtTail"><a href="#addAtTail" class="headerlink" title="addAtTail"></a>addAtTail</h4><p>直接在结尾插入即可</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309100201526.png" alt="image-20230910005226477"></p><h4 id="addAtIndex"><a href="#addAtIndex" class="headerlink" title="addAtIndex"></a>addAtIndex</h4><p>还是注意插入的顺序问题</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309100201418.png" alt="image-20230910005653650"></p><h4 id="deleteAtIndex"><a href="#deleteAtIndex" class="headerlink" title="deleteAtIndex"></a>deleteAtIndex</h4><p>找到要删除的结点,将该结点的上一个结点指向下一个结点</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309100202847.png" alt="image-20230910011347372"></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度: 涉及 index 的相关操作为 O(index), 其余为 O(1)</p><p>空间复杂度: O(n)</p><h3 id="Code-C"><a href="#Code-C" class="headerlink" title="Code(C++)"></a>Code(C++)</h3><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode* next;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> val):<span class="built_in">val</span>(val),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        dummy_head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; (_size<span class="number">-1</span>) || index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = dummy_head-&gt;next;<span class="comment">//要在虚拟头节点的下一个结点,以解决index等于0的情况</span></span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">         ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">         newNode-&gt;next = dummy_head-&gt;next;</span><br><span class="line">         dummy_head-&gt;next = newNode; </span><br><span class="line">         _size++;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">         ListNode* cur = dummy_head;</span><br><span class="line">         ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">         <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">             cur = cur-&gt;next;</span><br><span class="line">         &#125;</span><br><span class="line">         cur-&gt;next = newNode;</span><br><span class="line">         _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        ListNode* cur = dummy_head;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; _size) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">           cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">         newNode-&gt;next = cur-&gt;next;<span class="comment">//要保证操作的节点是cur-&gt;next;</span></span><br><span class="line">         cur-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; _size<span class="number">-1</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 要保证第n个结点一定要是cur-&gt;next;</span></span><br><span class="line">        ListNode* cur = dummy_head;</span><br><span class="line">        ListNode* temp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">          cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next; </span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        temp = <span class="literal">nullptr</span>;</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">    ListNode* dummy_head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(index);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/description/">206. 反转链表</a></h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>定义一个temp,来临时存放cur-&gt;next,这样在cur-&gt;next &#x3D; pre之后,才能将cur &#x3D; temp到下一个结点去</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309100202439.png" alt="image-20230910012140226"></p><h3 id="Code-JAVA-1"><a href="#Code-JAVA-1" class="headerlink" title="Code(JAVA)"></a>Code(JAVA)</h3><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next; <span class="comment">//因为如果将cur指向pre后就无法找到cur的下一个节点了</span></span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;算法60天训练–9-8-day3&quot;&gt;&lt;a href=&quot;#算法60天训练–9-8-day3&quot; class=&quot;headerlink&quot; title=&quot;算法60天训练–9-8-</summary>
      
    
    
    
    <category term="算法60天打卡" scheme="http://example.com/categories/%E7%AE%97%E6%B3%9560%E5%A4%A9%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>算法60天训练–9.7(day2)</title>
    <link href="http://example.com/2023/09/07/%E7%AE%97%E6%B3%9560%E5%A4%A9%E8%AE%AD%E7%BB%83%E2%80%939-7-day2/"/>
    <id>http://example.com/2023/09/07/%E7%AE%97%E6%B3%9560%E5%A4%A9%E8%AE%AD%E7%BB%83%E2%80%939-7-day2/</id>
    <published>2023-09-07T14:27:52.000Z</published>
    <updated>2023-09-09T16:11:38.188Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="算法60天训练–9-7-day2"><a href="#算法60天训练–9-7-day2" class="headerlink" title="算法60天训练–9.7(day2)"></a>算法60天训练–9.7(day2)</h1><p>[TOC]</p><h2 id="Problem977-有序数组的平方"><a href="#Problem977-有序数组的平方" class="headerlink" title="Problem977. 有序数组的平方"></a>Problem<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">977. 有序数组的平方</a></h2><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><blockquote><p>因为<strong>非递减数组</strong>,在两边的平方要么是最大,要么是最小,一定是在两边,所以这时候可以用双指针,</p><p>在数组两边定义两个指针,当左边的平方小于右边的平方,就往一个新数组放,放在最大索引处,然后左边++,同理,右边–.直到左边小于右边</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fcd55d8be8c8386bbb805e6f7155dd30.png" alt="image-20230907214610773"></p></blockquote><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度:</li></ul><blockquote><p>$O(n)$</p></blockquote><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res[i] *= nums[i];</span><br><span class="line">        &#125;                   </span><br><span class="line">        Arrays.sort(res) ;<span class="comment">//如果递减就  Arrays.sort(a, Collections.reverseOrder());</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度:$O(n + nlog n)$</p><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> []res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length]; <span class="comment">//递增存到新数组中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> nums.length-<span class="number">1</span>; <span class="comment">//新数组的索引</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length-<span class="number">1</span>; l &lt;= r; )&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l]*nums[l] &lt;= nums[r]*nums[r]) &#123;</span><br><span class="line">                 res[k--] = nums[r]*nums[r];</span><br><span class="line">                 r --;</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res[k--] = nums[l]*nums[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度:$O(n)$</p><h2 id="Problem-209-长度最小的子数组"><a href="#Problem-209-长度最小的子数组" class="headerlink" title="Problem: 209. 长度最小的子数组"></a>Problem: <a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">209. 长度最小的子数组</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="直接暴力"><a href="#直接暴力" class="headerlink" title="直接暴力"></a>直接暴力</h3><p>两层for循环,比较简单,不做演示</p><h3 id="滑动窗口解法"><a href="#滑动窗口解法" class="headerlink" title="滑动窗口解法"></a>滑动窗口解法</h3><p>使用一个for循环完成操作:</p><p>所谓滑动窗口,就是不断调节子序列的起始位置和终止位置,从而得出我们想要的结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2f78be28a0f2fc7596c032b7706bdbd7.png" alt="image-20230907220554936"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/806b60109cf14179c01840ca94112367.png" alt="image-20230907220606299"></p><h3 id="代码-java"><a href="#代码-java" class="headerlink" title="代码(java)"></a>代码(java)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="comment">// 使用滑动窗口解法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 起始位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 滑动窗口右端点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">subL</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//滑动窗口长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span> ; j &lt; nums.length; j++)&#123;</span><br><span class="line">    sum += nums[j];</span><br><span class="line">    <span class="keyword">while</span>(sum &gt;= target)&#123;<span class="comment">//开始缩小窗口,注意这里是while循环，缩小滑动窗口操作是一个持续性的操作</span></span><br><span class="line">      subL = j - i + <span class="number">1</span>;</span><br><span class="line">      result = Math.min(result,subL);</span><br><span class="line">    sum = sum - nums[i];</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result; <span class="comment">// 注意有没有被赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h2 id="Problem-59-螺旋矩阵-II"><a href="#Problem-59-螺旋矩阵-II" class="headerlink" title="Problem: 59. 螺旋矩阵 II"></a>Problem: <a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">59. 螺旋矩阵 II</a></h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>本题无非就是遍历二维数组,一层层向里遍历,但是不统一规定遍历每一条边的边界,会非常的混乱</p><p>所以本题采用循环不变量,对于判断每次螺旋的边界麻烦,不妨都采取左闭又开的原则</p><p>第一个不太好理解的地方就是为什么循环n&#x2F;2圈?是因为最后循环结束的时候StartX一定是在相对于第一条边中间的位置,那么循环了多少圈就可以由这个点对两边的竖边的条数进行分割.两边的条数一定是相等的,有就是转了多少圈.</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202309072228459.png" alt="image-20230907221135198"></p><p><strong>由图可以发现,转了3圈</strong></p><p>第二个地方就是左开右闭,每到一个节点就进入下一个边的循环.</p><p>在每个圈数结束后,更新起点,横纵坐标都加一.startX+1;startY+1</p><p>如果n&#x2F;2等于一,说明最中间有单独的数,直接单独赋值</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 控制循环次数</span></span><br><span class="line">        <span class="type">int</span> [][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//每次循环的开始点(start, start)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//定义填充数字</span></span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(loop ++ &lt; n/<span class="number">2</span>)&#123;<span class="comment">//判断边界后,loop从1开始</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟上侧从左到右</span></span><br><span class="line">        <span class="keyword">for</span>(j = start; j&lt;n-loop; j++)&#123;<span class="comment">// n-loop 是为了左闭又开</span></span><br><span class="line">            res[start][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟右侧从上到下</span></span><br><span class="line">        <span class="keyword">for</span>(i = start; i &lt; n-loop; i++)&#123;</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(;j&gt;=loop;j--)&#123;<span class="comment">//此时loop等于一,startX+1的位置</span></span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟从下到上</span></span><br><span class="line">        <span class="keyword">for</span>(;i&gt;=loop;i--)&#123; <span class="comment">//此时loop等于一,startY+1的位置</span></span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            res[start][start] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间复杂度 O(n^2): 模拟遍历二维矩阵的时间<br>空间复杂度 O(1)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;算法60天训练–9-7-day2&quot;&gt;&lt;a href=&quot;#算法60天训练–9-7-day2&quot; class=&quot;headerlink&quot; title=&quot;算法60天训练–9.7(</summary>
      
    
    
    
    <category term="算法60天打卡" scheme="http://example.com/categories/%E7%AE%97%E6%B3%9560%E5%A4%A9%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>拦截器Interceptor</title>
    <link href="http://example.com/2023/08/26/%E6%8B%A6%E6%88%AA%E5%99%A8Interceptor/"/>
    <id>http://example.com/2023/08/26/%E6%8B%A6%E6%88%AA%E5%99%A8Interceptor/</id>
    <published>2023-08-26T08:02:26.000Z</published>
    <updated>2023-08-26T10:18:05.077Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>什么是拦截器？ </p><p>是一种动态拦截方法调用的机制，类似于过滤器。 拦截器是Spring框架中提供的，用来动态拦截控制器方法的执行。 </p><p>拦截器的作用： </p><p>拦截请求，在指定方法调用前后，根据业务需要执行预先设定的代码。 在拦截器当中，我们通常也是做一些通用性的操作，比如：我们可以通过拦截器来拦截前端发起的请 求，将登录校验的逻辑全部编写在拦截器当中。在校验的过程当中，如发现用户登录了(携带JWT令牌且 是合法令牌)，就可以直接放行，去访问spring当中的资源。如果校验时发现并没有登录或是非法令 牌，就可以直接给前端响应未登录的错误信息。</p><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>实现HandlerInterceptor接口，并重写其所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义拦截器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"><span class="comment">//目标资源方法执行前执行。 返回true：放行 返回false：不放行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;preHandle .... &quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//true表示放行</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//目标资源方法执行后执行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler, ModelAndView</span></span><br><span class="line"><span class="params">modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;postHandle ... &quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//视图渲染完毕后执行，最后执行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span></span><br><span class="line">Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;afterCompletion .... &quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意： preHandle方法：目标资源方法执行前执行。 返回true：放行 返回false：不放行 postHandle方法：目标资源方法执行后执行 afterCompletion方法：视图渲染完毕后执行，最后执行</p></blockquote><h2 id="注册配置拦截器"><a href="#注册配置拦截器" class="headerlink" title="注册配置拦截器"></a>注册配置拦截器</h2><p>实现WebMvcConfigurer接口，并重写addInterceptors方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">//自定义的拦截器对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">//注册自定义拦截器对象</span></span><br><span class="line">    registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="string">&quot;/**</span></span><br><span class="line"><span class="string">    &quot;</span>);<span class="comment">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Interceptor详解"><a href="#Interceptor详解" class="headerlink" title="Interceptor详解"></a>Interceptor详解</h2><h2 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h2><p>首先我们先来看拦截器的拦截路径的配置，在注册配置拦截器的时候，我们要指定拦截器的拦截路径， 通过 <code>addPathPatterns</code>(“要拦截路径”) 方法，就可以指定要拦截哪些资源。 在入门程序中我们配置的是 &#x2F;** ，表示拦截所有资源，而在配置拦截器时，不仅可以指定要拦截哪些资 源，还可以指定不拦截哪些资源，只需要调用 <code>excludePathPatterns</code>(“不拦截路径”) 方法，指定哪些 资源不需要拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//拦截器对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">//注册自定义拦截器对象</span></span><br><span class="line">    registry.addInterceptor(loginCheckInterceptor)</span><br><span class="line">     .addPathPatterns(<span class="string">&quot;/**&quot;</span>)<span class="comment">//设置拦截器拦截的请求路径（ /**</span></span><br><span class="line">    表示拦截所有请求）</span><br><span class="line">     .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);<span class="comment">//设置不拦截的请求路径</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308261811132.png" alt="image-20230826181149973"></p><ul><li>当我们打开浏览器来访问部署在web服务器当中的web应用时，此时我们所定义的过滤器会拦截到 这次请求。拦截到这次请求之后，它会先执行放行前的逻辑，然后再执行放行操作。而由于我们当 前是基于springboot开发的，所以放行之后是进入到了spring的环境当中，也就是要来访问我 们所定义的controller当中的接口方法。</li><li>Tomcat并不识别所编写的Controller程序，但是它识别<code>Servlet</code>程序，所以在Spring的Web环 境中提供了一个非常核心的<code>Servlet：DispatcherServlet</code>（前端控制器），所有请求都会先 进行到&#96;&#96;DispatcherServlet&#96;，再将请求转给Controller。</li><li>当我们定义了拦截器后，会在执行Controller的方法之前，请求被拦截器拦截住。执行 <code>preHandle() </code>方法，这个方法执行完成后需要返回一个布尔类型的值，如果返回<code>true</code>，就表示放 行本次操作，才会继续访问controller中的方法；如果返回<code>false</code>，则不会放行（controller 中的方法也不会执行）。</li><li>在controller当中的方法执行完毕之后，再回过来执行 <code>postHandle() </code>这个方法以及 <code>afterCompletion()</code> 方法，然后再返回给<code>DispatcherServlet</code>，最终再来执行过滤器当中放 行后的这一部分逻辑的逻辑。执行完毕之后，最终给浏览器响应数据。</li></ul><p>参考黑马程序员课程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;拦截器Interceptor&quot;&gt;&lt;a href=&quot;#拦截器Interceptor&quot; class=&quot;headerlink&quot; title=&quot;拦截器Interceptor&quot;&gt;</summary>
      
    
    
    
    <category term="JAVA" scheme="http://example.com/categories/JAVA/"/>
    
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JWT令牌详解</title>
    <link href="http://example.com/2023/08/26/JWT%E4%BB%A4%E7%89%8C%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2023/08/26/JWT%E4%BB%A4%E7%89%8C%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-08-26T07:21:01.000Z</published>
    <updated>2023-08-26T07:47:03.709Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JWT全称：JSON Web Token （官网：<a href="https://jwt.io/%EF%BC%89">https://jwt.io/）</a></p><p>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><blockquote><p>简洁：是指jwt就是一个简单的字符串。可以在请求参数或者是请求头当中直接传递。 自包含：指的是jwt令牌，看似是一个随机的字符串，但是我们是可以根据自身的需求在jwt 令牌中存储自定义的数据内容。如：可以直接在jwt令牌中存储用户的相关信息。 简单来讲，jwt就是将原始的json数据格式进行了安全的封装，这样就可以直接基于jwt在 通信双方安全的进行信息传输了。</p></blockquote><h2 id="JWT的组成："><a href="#JWT的组成：" class="headerlink" title="JWT的组成："></a>JWT的组成：</h2><p>（JWT令牌由三个部分组成，三个部分之间使用英文的点来分割） 第一部分：Header(头）， 记录令牌类型、签名算法等。 例如： {“alg”:”HS256”,”type”:”JWT”} 第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如： {“id”:”1”,”username”:”Tom”} 第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加 入指定秘钥，通过指定签名算法计算而来。</p><blockquote><p>签名的目的就是为了防jwt令牌被篡改，而正是因为jwt令牌最后一个部分数字签名的存在， 所以整个jwt 令牌是非常安全可靠的。一旦jwt令牌当中任何一个部分、任何一个字符被篡 改了，整个令牌在校验的时候都会失败，所以它是非常安全可靠的。</p></blockquote><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308261527163.png" alt="image-20230826152706061"></p><blockquote><p>JWT是如何将原始的JSON格式数据，转变为字符串的呢？ 其实在生成JWT令牌时，会对JSON格式的数据进行一次编码：进行base64编码 Base64：是一种基于64个可打印的字符来表示二进制数据的编码方式。既然能编码，那也就意味 着也能解码。所使用的64个字符分别是A到Z、a到z、 0- 9，一个加号，一个斜杠，加起来就是 64个字符。任何数据经过base64编码之后，最终就会通过这64个字符来表示。当然还有一个符 号，那就是等号。等号它是一个补位的符号 需要注意的是Base64是编码方式，而不是加密方式。</p></blockquote><p><strong>既然这样, 编码和加密的区别是什么呢?</strong></p><p><strong>加密</strong>是对数据进行安全<strong>编码</strong>的过程，以便只有知道密钥或密码的授权用户才能为其他人检索原始数据，这只是垃圾。 <strong>编码</strong>是将数据转换为这样一种格式的过程，该格式可以由不同类型的系统使用公开可用的算法进行。 <strong>加密</strong>的目的是转换数据以使其对他人保密。 <strong>编码</strong>主要目的是保护数据的完整性。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>JWT令牌最典型的应用场景就是登录认证：</p><ul><li>在浏览器发起请求来执行登录操作，此时会访问登录的接口，如果登录成功之后，我们需要生成 一个jwt令牌，将生成的 jwt令牌返回给前端。 </li><li>前端拿到jwt令牌之后，会将jwt令牌存储起来。在后续的每一次请求中都会将jwt令牌携带到服 务端。</li><li>服务端统一拦截请求之后，先来判断一下这次请求有没有把令牌带过来，如果没有带过来，直接 拒绝访问，如果带过来了，还要校验一下令牌是否是有效。如果有效，就直接放行进行请求的处 理。</li></ul><p>在JWT登录认证的场景中我们发现，整个流程当中涉及到两步操作： </p><ol><li>在登录成功之后，要生成令牌。</li><li>每一次请求当中，要接收令牌并对令牌进行校验。</li></ol><h2 id="生成和校验"><a href="#生成和校验" class="headerlink" title="生成和校验"></a>生成和校验</h2><p>首先需要映入JWT的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生成JWT代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">genJwt</span><span class="params">()</span>&#123;</span><br><span class="line">Map&lt;String,Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">claims.put(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">claims.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line"> .setClaims(claims) <span class="comment">//自定义内容(载荷)</span></span><br><span class="line"> .signWith(SignatureAlgorithm.HS256, <span class="string">&quot;itheima&quot;</span>) <span class="comment">//签名算法</span></span><br><span class="line"> .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() +</span><br><span class="line"><span class="number">24</span>*<span class="number">3600</span>*<span class="number">1000</span>)) <span class="comment">//有效期</span></span><br><span class="line"> .compact();<span class="comment">//使其返回一个对象</span></span><br><span class="line">System.out.println(jwt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行测试方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMwfQ.fHi0Ub8npbyt71</span><br><span class="line">UqLXDdLyipptLgxBUg_mSuGJtXtBk</span><br></pre></td></tr></table></figure><p>输出的结果就是生成的JWT令牌,，通过英文的点分割对三个部分进行分割，我们可以将生成的令牌复制 一下，然后打开JWT的官网，将生成的令牌直接放在Encoded位置，此时就会自动的将令牌解析出来。</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308261534117.png" alt="image-20230826153437066"></p><blockquote><p>第一部分解析出来，看到JSON格式的原始数据，所使用的签名算法为HS256。 第二个部分是我们自定义的数据，之前我们自定义的数据就是id，还有一个exp代表的是我们所设 置的过期时间。 由于前两个部分是base64编码，所以是可以直接解码出来。但最后一个部分并不是base64编 码，是经过签名算法计算出来的，所以最后一个部分是不会解析的。</p></blockquote><p><strong>校验JWT令牌(解析生成的令牌)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseJwt</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line"> .setSigningKey(<span class="string">&quot;itheima&quot;</span>)<span class="comment">//指定签名密钥（必须保证和生成令牌时使用</span></span><br><span class="line">相同的签名密钥）</span><br><span class="line"></span><br><span class="line">.parseClaimsJws(<span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMw</span></span><br><span class="line"><span class="string">fQ.fHi0Ub8npbyt71UqLXDdLyipptLgxBUg_mSuGJtXtBk&quot;</span>)</span><br><span class="line"> .getBody();</span><br><span class="line">System.out.println(claims);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(以上参考了黑马程序员B站教程)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;JWT令牌&quot;&gt;&lt;a href=&quot;#JWT令牌&quot; class=&quot;headerlink&quot; title=&quot;JWT令牌&quot;&gt;&lt;/a&gt;JWT令牌&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="JAVA" scheme="http://example.com/categories/JAVA/"/>
    
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接数据库ERROR</title>
    <link href="http://example.com/2023/08/14/JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93ERROR/"/>
    <id>http://example.com/2023/08/14/JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93ERROR/</id>
    <published>2023-08-14T02:52:05.000Z</published>
    <updated>2023-08-17T14:06:14.394Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="解决报错“Loading-class-com-mysql-jdbc-Driver’-This-is-deprecated”"><a href="#解决报错“Loading-class-com-mysql-jdbc-Driver’-This-is-deprecated”" class="headerlink" title="解决报错“Loading class &#96;com.mysql.jdbc.Driver’. This is deprecated”"></a>解决报错“Loading class &#96;com.mysql.jdbc.Driver’. This is deprecated”</h1><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308141056315.png" alt="image-20230814105654242"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>在这个基础上,改为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>除此之外</p><p>将url地址:</p><p>原本是<code>url: jdbc:mysql://127.0.0.1:3306/</code></p><p>改为:</p><p><code>jdbc:mysql://127.0.0.1:3306/tlias?useUnicode=true&amp;characterEncoding=UTF-8&amp;userSSL=false&amp;serverTimezone=GMT%2B8</code></p><p><code>tlias</code>是数据库名</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308141059868.png" alt="image-20230814105914802"></p><p>然后就可以尝试测试,问题就可以解决啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;解决报错“Loading-class-com-mysql-jdbc-Driver’-This-is-deprecated”&quot;&gt;&lt;a href=&quot;#解决报错“Loadin</summary>
      
    
    
    
    <category term="报错解决" scheme="http://example.com/categories/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    
    
    <category term="JDBC" scheme="http://example.com/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://example.com/2023/08/11/%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2023/08/11/%E5%8F%8D%E5%B0%84/</id>
    <published>2023-08-11T10:31:27.000Z</published>
    <updated>2023-08-11T10:31:27.739Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>动态代理</title>
    <link href="http://example.com/2023/08/09/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2023/08/09/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2023-08-09T11:48:19.000Z</published>
    <updated>2023-08-09T11:50:11.818Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h2><p>如果在一个类对象上方法太多,可以通过代理来减轻自己的负担,就比如黑马阿玮PPT的一张图</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308091949765.png" alt="image-20230809183336178"></p><p>对于代理如何知道对象的方法.可以让对象和代理都实现一个接口来达成目的</p><p>&#x3D;&#x3D;为什么需要代理&#x3D;&#x3D;</p><p>代理可以无侵入式的给对象增加其他的共能</p><p>调用者 -&gt; 代理 -&gt; 对象</p><p>&#x3D;&#x3D;代理长什么样&#x3D;&#x3D;</p><p>就是对象要被代理的方法</p><p>&#x3D;&#x3D;java通过什么来保证代理的样子&#x3D;&#x3D;</p><p>通过接口保证,后面的对象和代理需要实现同一个接口,接口中就是要被代理的方法</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308091949245.png" alt="image-20230809192308305"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象和代理的接口</span></span><br><span class="line"><span class="keyword">package</span> DaiLi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">sing</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BigStar 对象 </span></span><br><span class="line"><span class="keyword">package</span> DaiLi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStar</span> <span class="keyword">implements</span> <span class="title class_">Star</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在唱&quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;谢谢大家&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BigStar&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建代理</span></span><br><span class="line"><span class="keyword">package</span> DaiLi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtile</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title function_">createProxy</span><span class="params">(BigStar bigStar)</span>&#123;</span><br><span class="line">        <span class="type">Star</span> <span class="variable">star</span> <span class="operator">=</span> (Star) Proxy.newProxyInstance(</span><br><span class="line">                ProxyUtile.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Star.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;sing&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备话筒,收钱&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;dance&quot;</span>.equals(method.getName())) System.out.println(<span class="string">&quot;准备场地收钱&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> method.invoke(bigStar, args);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">package</span> DaiLi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigStar</span> <span class="variable">bigStar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigStar</span>(<span class="string">&quot;鸡哥&quot;</span>);</span><br><span class="line">        <span class="type">Star</span> <span class="variable">proxy</span> <span class="operator">=</span> ProxyUtile.createProxy(bigStar);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> proxy.sing(<span class="string">&quot;只因你太美&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h1&gt;&lt;h2 id=&quot;思想分析&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="动态代理" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>删除倒数第n个结点</title>
    <link href="http://example.com/2023/08/08/%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>http://example.com/2023/08/08/%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/</id>
    <published>2023-08-08T15:40:39.000Z</published>
    <updated>2023-08-08T15:43:03.962Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><blockquote><p>Problem: <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">19. 删除链表的倒数第 N 个结点</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>双指针,首先让快指针先走n个点.这时候和slow的距离便是从最后一个点到要删的点的距离</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>定义一个fast指针,和一个slow指针,指向dummyhead(虚头结点,便于统一操作),<br>首先让快指针先走n个点.这时候和slow的距离便是从最后一个点到要删的点的距离</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308082341781.png" alt="image-20230808234135646"></p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p>$O(n)$</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p>$O(1)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fastIndex</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slowIndex</span> <span class="operator">=</span> dummyHead;  </span><br><span class="line">        n++; <span class="comment">//让fast指针多走一步,从而让slow-&gt;next指向被删的点</span></span><br><span class="line">        <span class="keyword">while</span>(n-- != <span class="number">0</span>&amp;&amp; fastIndex!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fastIndex = fastIndex.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fastIndex != <span class="literal">null</span>)&#123;</span><br><span class="line">            slowIndex = slowIndex.next;</span><br><span class="line">            fastIndex = fastIndex.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slowIndex.next = slowIndex.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* fast = dummyHead; <span class="comment">// 快指针</span></span><br><span class="line">        ListNode* slow = dummyHead;</span><br><span class="line">        n++; <span class="comment">//因为要操作的是slow-&gt;next,同时也为了避免fast为空指针的情况</span></span><br><span class="line">        <span class="keyword">while</span>(n-- &amp;&amp; fast != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/remove-nth-node-from-end-of-l</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="双指针" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>两两交换链表中的节点</title>
    <link href="http://example.com/2023/08/07/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://example.com/2023/08/07/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</id>
    <published>2023-08-07T15:56:12.000Z</published>
    <updated>2023-08-07T15:57:01.876Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">24. 两两交换链表中的节点</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>定义一个虚拟头结点, 赋值给一个临时节点cur,操作后两个节点.</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>比如节点0(虚拟)-&gt;1-&gt;2-&gt;3,这时候如果实现两两交换,就需要一下操作,用tmp和tmp1保存1和3节点, 然后将0-&gt;2,2-&gt;1,1-&gt;3,然后将0往后依次这样执行,直到(cur-&gt;next !&#x3D;null &amp;&amp; cur-&gt;next-&gt;next) (分奇数和偶数节点的判断),不能颠倒,避免报错空指针异常</p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p> $O(n)$</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p> $O(1)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmp1</span> <span class="operator">=</span> cur.next.next.next;</span><br><span class="line"></span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            cur.next.next = tmp;</span><br><span class="line">            cur.next.next.next = tmp1;</span><br><span class="line"></span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h1><pre><code class="C++">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public:    ListNode* swapPairs(ListNode* head) &#123;        ListNode* dummyHead = new ListNode(0);        dummyHead-&gt;next = head;        ListNode* temp = new ListNode(0);        ListNode* cur = dummyHead;        while(cur-&gt;next != nullptr &amp;&amp; cur-&gt;next-&gt;next != nullptr)&#123;            temp = cur-&gt;next;            ListNode* temp1 = cur-&gt;next-&gt;next-&gt;next;            cur-&gt;next = cur-&gt;next-&gt;next;            cur-&gt;next-&gt;next = temp;            cur-&gt;next-&gt;next-&gt;next = temp1;                        cur = cur-&gt;next-&gt;next;        &#125;     return dummyHead-&gt;next;//不能返回head,因为已经被改变了    &#125;&#125;;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/swap-nodes-in-pairs/description/&quot;&gt;24. 两两交换链表中的节点&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TO</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://example.com/2023/08/06/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2023/08/06/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2023-08-06T13:00:55.000Z</published>
    <updated>2023-08-06T13:01:52.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/reverse-linked-list/description/">206. 反转链表</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>双指针算法,定义pre,和cur,来遍历链表.然后进行反转</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>定义一个temp记录cur-&gt;next的位置,当反转通过<code>cur-&gt;next=pre</code>来完成,<br>所以之后pre &#x3D; cur, cur&#x3D;tmep(向后移动),直到cur为空,即达到遍历完成的效果</p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p> $O(n)$</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p> $O(n)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next; <span class="comment">// 在cur.next改变之前</span></span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* temp = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            temp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/reverse-linked-list/description/&quot;&gt;206. 反转链表&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用mybatis实现查询报错解决</title>
    <link href="http://example.com/2023/08/05/%E4%BD%BF%E7%94%A8mybatis%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2023/08/05/%E4%BD%BF%E7%94%A8mybatis%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</id>
    <published>2023-08-05T11:38:51.000Z</published>
    <updated>2023-08-05T15:05:37.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错信息“Unable-to-resolve-column-‘id’”"><a href="#报错信息“Unable-to-resolve-column-‘id’”" class="headerlink" title="报错信息“Unable to resolve column ‘id’”"></a>报错信息“Unable to resolve column ‘id’”</h2><p>​<img src="/../imgs/202308051939669.png" alt="image-20230805193945623"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li></li></ol><p><img src="/../imgs/202308051940228.png" alt="image-20230805194016190"></p><p>2.<img src="/../imgs/202308051940483.png" alt="image-20230805194036432"></p><ol start="3"><li></li></ol><p><img src="/../imgs/202308051941479.png" alt="image-20230805194105422"></p><p>4 . 更改为使用的表</p><p><img src="/../imgs/202308051941020.png" alt="image-20230805194133971"></p><p>然后报错就消失啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;报错信息“Unable-to-resolve-column-‘id’”&quot;&gt;&lt;a href=&quot;#报错信息“Unable-to-resolve-column-‘id’”&quot; class=&quot;headerlink&quot; title=&quot;报错信息“Unable to resolve</summary>
      
    
    
    
    <category term="报错解决" scheme="http://example.com/categories/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    
    
    <category term="mybatis" scheme="http://example.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>主键</title>
    <link href="http://example.com/2023/08/05/%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F/"/>
    <id>http://example.com/2023/08/05/%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F/</id>
    <published>2023-08-05T07:33:48.000Z</published>
    <updated>2023-08-05T15:08:44.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主键概述"><a href="#主键概述" class="headerlink" title="主键概述"></a>主键概述</h1><p>主键值是每一行记录的唯一标识(就是类似不能重复的身份证号)</p><p><img src="/../imgs/202308051618449.png" alt="image-20230805153904522"></p><p><strong>任何一张表都应该有主键,没有主键表无效</strong>,</p><p>主键的特征: not null + unique (不能为空,且不重复)</p><p>给一张表添加主键:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table t_vip(</span><br><span class="line">id int primary key,//列级约束</span><br><span class="line">name varchar(255)</span><br><span class="line">);</span><br><span class="line">create table t_vip(</span><br><span class="line">id int ,</span><br><span class="line">name varchar(255),</span><br><span class="line">    primary key(id)  //表级约束</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../imgs/202308051618117.png" alt="image-20230805154406943"></p><h1 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h1><p>id 和name 联合起来做主键,叫做复合主键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t_vip(</span><br><span class="line">id int ,</span><br><span class="line">name varchar(255),</span><br><span class="line">    primary key(id,name)  //表级约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="/../imgs/202308051547340.png" alt="image-20230805154756288"></p><p>在实际开发中不建议使用复合主键</p><p>因为主键值存在的意义就是一行的唯一标识</p><h1 id="主键数量"><a href="#主键数量" class="headerlink" title="主键数量"></a>主键数量</h1><p><img src="/../imgs/202308051619294.png" alt="image-20230805154917751"></p><p>主键只能有一个,刚刚说的联合主键和这个情况不一样</p><h1 id="主键值"><a href="#主键值" class="headerlink" title="主键值"></a>主键值</h1><p>建议使用,<code>int</code> <code>bigint</code> <code>char</code> 等类型</p><p>不建议使用<code>varchar</code>来做主键.主键值一般都是数字,一般都是定长的1</p><h1 id="主键分类"><a href="#主键分类" class="headerlink" title="主键分类"></a>主键分类</h1><p><strong>根据主键字段的字段数量来划分：</strong><br>            单一主键（推荐的，常用的。）<br>            复合主键(多个字段联合起来添加一个主键约束)（复合主键不建议使用，因为复合主键违背三范式。）<br>        <strong>根据主键性质来划分：</strong><br>            自然主键：主键值最好就是一个和业务没有任何关系的自然数。（这种方式是推荐的）<br>            业务主键：主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键，拿着身份证号码作为主键。（不推荐用）<br>                          最好不要拿着和业务挂钩的字段作为主键。因为以后的业务一旦发生改变的时候，主键值可能也需要<br>                          随着发生变化，但有的时候没有办法变化，因为变化可能会导致主键值重复。<br>    <strong>mysql提供主键值自增：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_user;</span><br><span class="line">create table t_user(</span><br><span class="line">id int primary key auto_increment, // id字段自动维护一个自增的数字，从1开始，以1递增。</span><br><span class="line">username varchar(255)</span><br><span class="line">);</span><br><span class="line">insert into t_user(username) values(&#x27;a&#x27;);</span><br><span class="line">insert into t_user(username) values(&#x27;b&#x27;);</span><br><span class="line">insert into t_user(username) values(&#x27;c&#x27;);</span><br><span class="line">insert into t_user(username) values(&#x27;d&#x27;);</span><br><span class="line">insert into t_user(username) values(&#x27;e&#x27;);</span><br><span class="line">insert into t_user(username) values(&#x27;f&#x27;);</span><br><span class="line">select * from t_user;</span><br><span class="line"></span><br><span class="line">提示:Oracle当中也提供了一个自增机制，叫做：序列（sequence）对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主键概述&quot;&gt;&lt;a href=&quot;#主键概述&quot; class=&quot;headerlink&quot; title=&quot;主键概述&quot;&gt;&lt;/a&gt;主键概述&lt;/h1&gt;&lt;p&gt;主键值是每一行记录的唯一标识(就是类似不能重复的身份证号)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../imgs/202308</summary>
      
    
    
    
    <category term="MySql" scheme="http://example.com/categories/MySql/"/>
    
    
    <category term="主键" scheme="http://example.com/tags/%E4%B8%BB%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>移除链表元素</title>
    <link href="http://example.com/2023/08/04/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2023/08/04/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</id>
    <published>2023-08-04T14:54:31.000Z</published>
    <updated>2023-08-04T14:55:15.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">203. 移除链表元素</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>遍历链表,如果相等,需要删除的元素的左边节点指向删除元素的右边节点.<br>如果删除的是表头元素,为了统一,建立一个虚拟头结点</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>定义一个虚拟头结点dummyHead,和遍历需要的指针cur,进入循环,遍历链表元素,如果相等就将删除的元素的左边节点指向删除元素的右边节点.<br>如果删除的是表头元素,为了统一,建立一个虚拟头结点.直到cur-&gt;next !&#x3D; null.因为cur &#x3D;&#x3D; dummyHead. 实际上我们操作的也一直是cur-&gt;next;</p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p>$O(n)$</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p>$O(1)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next.val == val)&#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Code-C"><a href="#Code-C" class="headerlink" title="Code(C++)"></a>Code(C++)</h1><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">      ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">      dummyHead-&gt;next = head; <span class="comment">//这里要从虚节点的下一个操作</span></span><br><span class="line">      ListNode* cur = dummyHead;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(cur-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(cur-&gt;next-&gt;val == val)&#123;<span class="comment">// 操作的永远是 cur-&gt;next</span></span><br><span class="line">              ListNode* tmp = cur-&gt;next; <span class="comment">// 操作的永远是 cur-&gt;next</span></span><br><span class="line">              cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">              <span class="keyword">delete</span> tmp;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              cur = cur-&gt;next;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      head = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/remove-linked-list-elements/description/&quot;&gt;203. 移除链表元素&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>螺旋矩阵||</title>
    <link href="http://example.com/2023/08/04/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>http://example.com/2023/08/04/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</id>
    <published>2023-08-03T16:03:13.000Z</published>
    <updated>2023-08-03T16:04:32.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">59. 螺旋矩阵 II</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>本体采用循环不变量,对于判断每次螺旋的边界麻烦,不妨都采取左闭又开的原则</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>第一个不太好理解的地方就是为什么循环n&#x2F;2圈?是因为最后循环结束的时候StartX一定是在相对于第一条边中间的位置,那么循环了多少圈就可以由这个点对两边的竖边的条数进行分割.两边的条数一定是相等的,有就是转了多少圈.<br>第二个地方就是左开右闭,每到一个节点就进入下一个边的循环.<br>在每个圈数结束后,更新起点,横纵坐标都加一.startX+1;startY+1</p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p> $n(2)$</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p>$O(1)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 控制循环次数</span></span><br><span class="line">        <span class="type">int</span> [][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//每次循环的开始点(start, start)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//定义填充数字</span></span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(loop ++ &lt; n/<span class="number">2</span>)&#123;<span class="comment">//判断边界后,loop从1开始</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟上侧从左到右</span></span><br><span class="line">        <span class="keyword">for</span>(j = start; j&lt;n-loop; j++)&#123;<span class="comment">// n-loop 是为了左闭又开</span></span><br><span class="line">            res[start][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟右侧从上到下</span></span><br><span class="line">        <span class="keyword">for</span>(i = start; i &lt; n-loop; i++)&#123;</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(;j&gt;=loop;j--)&#123;<span class="comment">//此时loop等于一,startX+1的位置</span></span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟从下到上</span></span><br><span class="line">        <span class="keyword">for</span>(;i&gt;=loop;i--)&#123; <span class="comment">//此时loop等于一,startY+1的位置</span></span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            res[start][start] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/spiral-matrix-ii/description/&quot;&gt;59. 螺旋矩阵 II&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="循环不变量" scheme="http://example.com/tags/%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot初学相关配置问题</title>
    <link href="http://example.com/2023/08/02/SpringBoot%E5%88%9D%E5%AD%A6%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/08/02/SpringBoot%E5%88%9D%E5%AD%A6%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</id>
    <published>2023-08-02T14:38:17.000Z</published>
    <updated>2023-08-05T15:07:47.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot初学相关配置问题"><a href="#SpringBoot初学相关配置问题" class="headerlink" title="SpringBoot初学相关配置问题"></a>SpringBoot初学相关配置问题</h1><p>如果下了多个JDK版本要对应</p><p><img src="/../imgs/image-20230802223518620-16912480524331.png" alt="image-20230802223518620"></p><p><img src="/../imgs/image-20230802223544161-16912480560582.png" alt="image-20230802223544161"></p><p><img src="/../imgs/image-20230802223559402-16912480586283.png" alt="image-20230802223559402"></p><p><img src="/../imgs/image-20230802223615199-16912480613534.png" alt="image-20230802223615199"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot初学相关配置问题&quot;&gt;&lt;a href=&quot;#SpringBoot初学相关配置问题&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot初学相关配置问题&quot;&gt;&lt;/a&gt;SpringBoot初学相关配置问题&lt;/h1&gt;&lt;p&gt;如果下了多个</summary>
      
    
    
    
    <category term="报错解决" scheme="http://example.com/categories/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>maven配置相关问题</title>
    <link href="http://example.com/2023/08/01/maven%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/08/01/maven%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2023-08-01T13:15:36.000Z</published>
    <updated>2023-08-02T14:39:14.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决-Unresolved-plugin-‘org-apache-maven-plugins-maven-clean-plugin-2-5’-问题"><a href="#解决-Unresolved-plugin-‘org-apache-maven-plugins-maven-clean-plugin-2-5’-问题" class="headerlink" title="解决 (Unresolved plugin: ‘org.apache.maven.plugins:maven-clean-plugin:2.5’)问题"></a>解决 (Unresolved plugin: ‘org.apache.maven.plugins:maven-clean-plugin:2.5’)问题</h3><p>首先要先下载maven相关包,遇到这种问题一般是在创建maven项目之后,</p><p>这时候先看settings中maven ,其中相关路径以及经典配置</p><p>如果仍出现这种problems,</p><p>可以看maven配置的 Local respository下面的对钩有没有勾上,勾上之后重新加载就可以解决问题啦</p><p><img src="/../imgs/image-20230801212737931.png" alt="image-20230801212737931"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;解决-Unresolved-plugin-‘org-apache-maven-plugins-maven-clean-plugin-2-5’-问题&quot;&gt;&lt;a href=&quot;#解决-Unresolved-plugin-‘org-apache-maven-plugins-</summary>
      
    
    
    
    <category term="报错解决" scheme="http://example.com/categories/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    
    
    <category term="maven" scheme="http://example.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="http://example.com/2023/08/01/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://example.com/2023/08/01/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2023-08-01T00:58:06.000Z</published>
    <updated>2023-08-01T00:59:58.470Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">209. 长度最小的子数组</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>首先是暴力,通过两层for循环遍历所有情况,取最小;<br>然后就是滑动窗口, 因为本体取的是子数组, 就不能出现跨越的情况.通过滑动窗口来优化</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>首先定义一个滑动窗口的右端点, 然后计算sum , 如果满足条件, 就将左端点往右移动,直到sum &lt; target, 然后继续往右挪动右端点. 不断更新最小值result;</p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p>O(n) 暴力 O(n^2)</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p>O(1)</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">st</span> <span class="operator">=</span> <span class="number">0</span>; st &lt; nums.length; st++)&#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> st; l &lt; nums.length; l++)&#123;</span><br><span class="line">                sum += nums[l];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt;= target)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> l - st + <span class="number">1</span>;</span><br><span class="line">                    result = Math.min(len, result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">st</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">la</span> <span class="operator">=</span> <span class="number">0</span>; la &lt; nums.length; la++)&#123; <span class="comment">// 遍历终止点</span></span><br><span class="line">            sum += nums[la];</span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123; <span class="comment">//满足条件就一直通过左端点往右移动</span></span><br><span class="line">                len = la - st + <span class="number">1</span>; <span class="comment">//取子序列的长度</span></span><br><span class="line">                <span class="comment">//result = Math.min(len, result);</span></span><br><span class="line">                result = result &lt; len ? result : len;</span><br><span class="line">                sum -= nums[st++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> :result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/minimum-size-subarray-sum/description/&quot;&gt;209. 长度最小的子数组&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="双指针" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="http://example.com/2023/07/30/Vue3/"/>
    <id>http://example.com/2023/07/30/Vue3/</id>
    <published>2023-07-30T15:10:20.000Z</published>
    <updated>2023-08-07T09:34:51.150Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h2 id="1-vue语法初探"><a href="#1-vue语法初探" class="headerlink" title="1.vue语法初探"></a>1.vue语法初探</h2><h3 id="1-1-HelloWord"><a href="#1-1-HelloWord" class="headerlink" title="1.1 HelloWord"></a>1.1 HelloWord</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 从面向dom编程到面向数据编程</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">content: 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 当页面加载完成,会自动调用mounted</span><br><span class="line">mounted() &#123;</span><br><span class="line">setInterval( ()=&gt;&#123;</span><br><span class="line">this.content++</span><br><span class="line">&#125;,1000)</span><br><span class="line">&#125;,</span><br><span class="line">template: `&lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;`</span><br><span class="line">&#125;).mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>这里要引用<code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><p>&#x3D;&#x3D;要慢慢将思维由面向dom到面向数据&#x3D;&#x3D;</p><h3 id="1-2-反转和隐藏"><a href="#1-2-反转和隐藏" class="headerlink" title="1.2 反转和隐藏"></a>1.2 反转和隐藏</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   // 从面向dom编程到面向数据编程</span><br><span class="line">   Vue.createApp(&#123;</span><br><span class="line">   data()&#123;</span><br><span class="line">   return &#123;</span><br><span class="line">   content: &#x27;helloworld&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">   handClick()&#123;</span><br><span class="line">   this.content  = this.content.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   // 绑定反转函数,实习写在methods里面</span><br><span class="line">   template: `</span><br><span class="line">   &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="line">   &lt;button @click = &quot;handClick&quot;&gt;反转&lt;/button&gt;</span><br><span class="line">   ` </span><br><span class="line">   &#125;).mount(&#x27;#root&#x27;)</span><br><span class="line">   &lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 从面向dom编程到面向数据编程</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">show: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handClick()&#123;</span><br><span class="line">// 面向数据编程,改变数据的值</span><br><span class="line">this.show = !this.show</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: `</span><br><span class="line">&lt;span v-if = &quot;show&quot;&gt;hello&lt;/span&gt;</span><br><span class="line">&lt;button @click = &quot;handClick&quot;&gt;隐藏/出现&lt;/button&gt;</span><br><span class="line">` </span><br><span class="line">&#125;).mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-todolist"><a href="#1-3-todolist" class="headerlink" title="1.3 todolist"></a>1.3 todolist</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 从面向dom编程到面向数据编程</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">list: [],</span><br><span class="line">inputValue: &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handClick()&#123;</span><br><span class="line">this.list.push(this.inputValue)</span><br><span class="line">    inputValue = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: `</span><br><span class="line">&lt;input v-model = &quot;inputValue&quot;&gt;</span><br><span class="line">&lt;button @click = &quot;handClick&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for = &quot;(item,index) of list&quot;&gt;&#123;&#123;item&#125;&#125; &#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">` </span><br><span class="line">&#125;).mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>index ,是item遍历的索引</p><p><code>&lt;button @click = &quot;handClick&quot; title = &quot;222&quot;&gt;增加&lt;/button&gt;</code></p><p>这样不对,如果title要和数据绑定,需要使用v-bind指令 :title&#x3D;   </p><h3 id="1-4-组件概念初探"><a href="#1-4-组件概念初探" class="headerlink" title="1,4 组件概念初探"></a>1,4 组件概念初探</h3><p>如果<code>.mount(&#39;#root&#39;)</code>挂载了组件之后再去<code>qpp.component()</code>去创建组件就来不及了</p><p>展示组件:定义完组件之后再去挂载<code>app.mount(&#39;#root&#39;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 从面向dom编程到面向数据编程</span><br><span class="line">const app = Vue.createApp(&#123;</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">list: [],</span><br><span class="line">inputValue: &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handClick()&#123;</span><br><span class="line">this.list.push(this.inputValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: `</span><br><span class="line">&lt;input v-model = &quot;inputValue&quot;&gt;</span><br><span class="line">&lt;button @click = &quot;handClick&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;todo-item v-for = &quot;(item, index) of list&quot;</span><br><span class="line">:content = &quot;item&quot;</span><br><span class="line">:index = &quot;index&quot;</span><br><span class="line">&gt;&lt;/todo-item&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">` </span><br><span class="line">&#125;);</span><br><span class="line">app.component(&#x27;todo-item&#x27;, &#123;</span><br><span class="line">props: [&#x27;content&#x27;, &#x27;index&#x27;],</span><br><span class="line">template: &#x27;&lt;div&gt;&#123;&#123;content&#125;&#125;----&#123;&#123;index&#125;&#125;&lt;/div&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在这里,将li标签的属性通过组件化展示出来,:index :content分别绑定两个变量, 在组件中,由<code>props:[绑定值1,绑定值2...]</code>去接收</p><h2 id="2-Vue基础语法"><a href="#2-Vue基础语法" class="headerlink" title="2. Vue基础语法"></a>2. Vue基础语法</h2><h3 id="2-1-基础概念"><a href="#2-1-基础概念" class="headerlink" title="2.1 基础概念"></a>2.1 基础概念</h3><p>获取数据要用<code>vm.$data.xxx</code></p><p>createApp 表示创建一个Vue应用, 存储到app变量中, 传入的参数表示,这个应用最外层的组件应该如何展示</p><p>&#x3D;&#x3D;mvvm&#x3D;&#x3D;模式, m-&gt;model 数据 v-&gt;view 视图 vm -&gt; viewModel视图数据连接层</p><p>这也是为什么 const vm &#x3D; app.mount(‘#root’) vm代表的就是Vue的根组件</p><h3 id="2-2-生命周期函数"><a href="#2-2-生命周期函数" class="headerlink" title="2.2 生命周期函数"></a>2.2 生命周期函数</h3><p><strong>在某一时刻会自动执行的函数</strong></p><p>比如之前的 mounted(){}</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031550391.png" alt="image-20230730205903567"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031550672.png" alt="image-20230730210033959"></p><p>图里面的判断意思是. 如果没有template 就去root挂载的根节点去找innerHtml结构</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031550645.png" alt="image-20230730210226446"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031550175.png" alt="image-20230730210418348"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031550137.png" alt="image-20230730210503916"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031551822.png" alt="image-20230730210625949"></p><p><code>beforeUpdate</code>是在数据改变(页面还没有渲染时调用)</p><p><code>updated</code>是在页面重新渲染完之后调用,注意二者区别!</p><p><code>beforeUnmount</code>当Vue应用失效时,自动执行的函数</p><p><code>unmounted</code> 当Vue应用失效时,且dom完全销毁之后,自动执行的函数</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031551739.png" alt="image-20230730211407402"></p><h3 id="2-3-常用模版语法"><a href="#2-3-常用模版语法" class="headerlink" title="2.3 常用模版语法"></a>2.3 常用模版语法</h3><p>template: <code>&lt;div v-html = &quot;message&quot;&lt;/div&gt;</code></p><p>避免转义</p><p>v-bind:(属性或变量) &#x3D; …  与data中的数据绑定 , 不知道起什么名可以**:[data中的属性名]**</p><p>template: <code>&lt;div v-html = &quot;message&quot;&gt;&#123;&#123;在这里面可以写类似于Max(,)这样的js表达式&#125;&#125;&lt;/div&gt;</code>但是如果是if(){}就不行,这是js语句,不是表达式</p><p> <code>&lt;div v-once&gt;&#123;&#123;m&#125;&#125;&lt;/div&gt; </code>只显示一次,当m再变化,页面渲染</p><p><code>v-if = &#39;show&#39;</code>  show是data:{} 中的bool</p><p>v-on  点击绑定</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031551231.png" alt="image-20230731214451194"></p><p>@[event] , 而event可以在data中 event: ‘click’ &#x2F;‘ mouseenter’ 绑定其他事件</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031551123.png" alt="image-20230731215311197"></p><p>阻止默认行为  @click.prevent &#x3D; “函数名”</p><h3 id="2-4-数据-方法-计算属性-侦听器"><a href="#2-4-数据-方法-计算属性-侦听器" class="headerlink" title="2.4 数据,方法,计算属性,侦听器"></a>2.4 数据,方法,计算属性,侦听器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  methods:&#123;</span><br><span class="line">    formatString(string)&#123;</span><br><span class="line">      return string.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `&lt;div&gt;&#123;&#123;formatString(message)&#125;&#125;&lt;/div&gt;`</span><br><span class="line">&#125;).mount(&#x27;#root&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  const vm = Vue.createApp(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &#x27;hello world&#x27;,</span><br><span class="line">        count: 2,</span><br><span class="line">        price: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      // 当计算属性依赖的内容发生改变,才会重新执行计算</span><br><span class="line">      total()&#123;</span><br><span class="line">        // 注意计算属性别漏了this</span><br><span class="line">        // return this.count * this.price; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      formatString(string)&#123;</span><br><span class="line">        return string.toUpperCase();</span><br><span class="line">      &#125;,</span><br><span class="line">      // 只要页面重新渲染,就会重新计算</span><br><span class="line">      </span><br><span class="line">        Date.now();</span><br><span class="line">        // return this.count * this.price; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `&lt;div&gt;&#123;&#123;total&#125;&#125;&lt;/div&gt;`</span><br><span class="line">  &#125;).mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p> total()(在computed中)</p><p>   &#x2F;当计算属性依赖的内容发生改变,才会重新执行计算<br>getTotal()(在函数方法中)</p><p> 只要页面重新渲染,就会重新计算</p><p><strong>侦听器</strong></p><p>如果想数据改变隔五秒打印一些东西,用computed肯定是不行的,这是后就需要加一个watch侦听器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  const vm = Vue.createApp(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &#x27;hello world&#x27;,</span><br><span class="line">        count: 2,</span><br><span class="line">        price: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      // 当计算属性依赖的内容发生改变,才会重新执行计算</span><br><span class="line">      total()&#123;</span><br><span class="line">        // 注意计算属性别漏了this</span><br><span class="line">         return this.count * this.price; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      price()&#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          console.log(&#x27;price changed&#x27;)</span><br><span class="line">        &#125;,3000)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      formatString(string)&#123;</span><br><span class="line">        return string.toUpperCase();</span><br><span class="line">      &#125;,</span><br><span class="line">      // 只要页面重新渲染,就会重新计算</span><br><span class="line">      getTotal()&#123;</span><br><span class="line">        Date.now();</span><br><span class="line">        // return this.count * this.price; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `&lt;div&gt;&#123;&#123;total&#125;&#125;&lt;/div&gt;`</span><br><span class="line">  &#125;).mount(&#x27;#root&#x27;)</span><br></pre></td></tr></table></figure><p><strong>computed 和 method 都能实现的一个功能,建议使用computed,因为有缓存, computed 和 watcher 都能实现的功能,建议使用computed,因为更加简洁. watched 也可以监听price改变,然后对页面重新与安然,但是麻烦,不如computed</strong></p><p>异步可以在watch 里面, 但同步不如在computed里面更简洁</p><h3 id="2-5-样式绑定语法"><a href="#2-5-样式绑定语法" class="headerlink" title="2.5.样式绑定语法"></a>2.5.样式绑定语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        classString: &#x27;red&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `&lt;div :class = &#x27;classString&#x27;&gt; hello&lt;/div&gt;`</span><br><span class="line">  &#125;)</span><br><span class="line">  const vm =  app.mount(&#x27;#root&#x27;)</span><br></pre></td></tr></table></figure><p>通过字符串绑定来改变style样式</p><p><img src="/../imgs/image-20230802133154875.png" alt="image-20230802133154875"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031552596.png" alt="image-20230802135424710"></p><p>添加子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        classString: &#x27;red&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `&lt;div :class = &#x27;classString&#x27;&gt; hello</span><br><span class="line">      &lt;demo /&gt;</span><br><span class="line">      &lt;/div&gt;`</span><br><span class="line">  &#125;)</span><br><span class="line">  // 创建组件</span><br><span class="line">  app.component(&#x27;demo&#x27;, &#123;</span><br><span class="line">    template: &#x27; &lt;div class = &quot;green&quot; &gt; single &lt;/div&gt;&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  const vm =  app.mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>如果子组件有两个div. 当把class加到父组件demo中时,可以控制显示哪个div:</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031552559.png" alt="image-20230802140326043"></p><p><strong>通过style的方式写样式:</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031552543.png" alt="image-20230802140537613"></p><p>这里简写写styleObject 可读性更强</p><h3 id="2-6-条件渲染"><a href="#2-6-条件渲染" class="headerlink" title="2.6 条件渲染"></a>2.6 条件渲染</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        show : false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div v-if = &#x27;show&#x27;&gt; hello&lt;/div&gt;</span><br><span class="line">      &lt;div v-show = &#x27;show&#x27;&gt; hello&lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">  &#125;);</span><br><span class="line">  const vm =  app.mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>v-if 是直接在DOM上添加或者删除,而v-show值通过冬至<code>display:none属性</code>来控制是否显示</p><p>如果频繁改变的话还是建议使用v-show</p><p>除此之外,在vue中还可以使用if else if else逻辑</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031552914.png" alt="image-20230802141746575"></p><p>表示如果<code>conditionOne</code> 是True的话就展示<code>if</code>,如果不是,就看<code>conditionTwo</code>是true的话就显示<code>else if</code>, 否则就展示<code>else</code></p><h3 id="2-7-列表渲染"><a href="#2-7-列表渲染" class="headerlink" title="2.7 列表渲染"></a>2.7 列表渲染</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>可以对list 循环,也可以对对象循环:<img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031552486.png" alt="image-20230802144335089"></p><p>这里的value 代表对应的变量值, key代表<code>firstname</code>这些等等</p><p>index是索引, 从0开始往后一次增加 </p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031553397.png" alt="image-20230802144744201"></p><p><strong>循环的时候尽量使用key值,避免重复渲染带来的性能问题</strong></p><h4 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h4><p> <img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031553233.png" alt="image-20230802144910942"></p><p>实现页面的添加和删除</p><p>pop索引大的开始删,shift从小的开始删除,unshift会忘头部(索引开头)添加东西</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/202308031540064.png" alt="image-20230802145058175"></p><p><code>reverse</code>可以变更顺序</p><p><strong>2-直接替换数组</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031553962.png" alt="image-20230802145323072"></p><h4 id="操作对象"><a href="#操作对象" class="headerlink" title="操作对象"></a>操作对象</h4><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031553459.png" alt="image-20230802145551010"></p><p>在老版本的vue中出直接修改对象里面的内容可能会有一定的问题</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031553828.png" alt="image-20230802145822932"></p><p>这个是实现不展示lastName,但是要注意 <strong>循环和判断不要写在一个标签上,循环的优先级会更高,如果要筛序性展示,则新创建一个div标签,来选择是否展示</strong>  </p><p>为了避免每一层多一个div标签</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031553409.png" alt="image-20230802150211640"></p><p>这列<code>template</code> 知识占位符,并不会影响渲染效果</p><h3 id="2-8-事件绑定"><a href="#2-8-事件绑定" class="headerlink" title="2.8 事件绑定"></a>2.8 事件绑定</h3><h4 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h4><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554966.png" alt="image-20230802161607518"></p><p>如果要传参,且还要原生的event事件,就可以在event前面加一个$传递过去</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554472.png" alt="image-20230802161831118"></p><p>如果要使用多个函数,就不能只写函数名了,要加上括号</p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>stop:避免冒泡</p><p><code>@click.stop = &quot;方法&quot;</code></p><p>.self 只有点自己才会执行,点子标签里面的其他元素则不会执行</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554812.png" alt="image-20230802162356544"></p><p>.prevent组织默认行为</p><p>.capture 捕获</p><p>once 只执行一次,再点击就不会执行</p><p>@scroll.passive</p><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554363.png" alt="image-20230802162853911"></p><p>exact是只按ctrl这个键再点击执行的,精确执行</p><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><p><strong>v-model</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554224.png" alt="image-20230802163233015"></p><p>输入框的值变,页面渲染的值跟着改变</p><p><strong>textarea</strong></p><p>​<img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554954.png" alt="image-20230802163655598"></p><p>checkbox:<img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554461.png" alt="image-20230802163733528"></p><p> false跟着点击 变成true再变回来</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031554729.png" alt="image-20230802171339552"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555260.png" alt="image-20230802163853755"></p><p>自定义值取代false True</p><p>多个checkbox会往数组里面存Value</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555383.png" alt="image-20230802164001558"></p><p><strong>radio</strong></p><p>是单选,不能都放到数组中</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555570.png" alt="image-20230802163946958"></p><p>初始值要变成字符串,选谁变成谁</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555611.png" alt="image-20230802164057819"></p><p><strong>select</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555088.png" alt="image-20230802164357563"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555997.png" alt="image-20230802164204475"></p><p><strong>加上multiple变成多选</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555900.png" alt="image-20230802164631503"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555807.png" alt="image-20230802164650502"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031555841.png" alt="image-20230802164838310"></p><p>最终存储会将value里面的对象作为存储的值</p><p>帮助我吗做项目临时转化</p><h4 id="表单中双向绑定的使用"><a href="#表单中双向绑定的使用" class="headerlink" title="表单中双向绑定的使用"></a>表单中双向绑定的使用</h4><p>lazy</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031556984.png" alt="image-20230802171443748"></p><p>当失去焦点的时候渲染页面展示的值,跟v-model不一样的地方在于不实时渲染</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031556604.png" alt="image-20230802171603688"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031556448.png" alt="image-20230802171623240"></p><p>输入内容的时候由String变成number</p><p><strong>trim</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031549888.png" alt="image-20230802171807151"></p><p>只去除字符串前后字符,中间的不会去除</p><h2 id="3-探索组件的概念"><a href="#3-探索组件的概念" class="headerlink" title="3.探索组件的概念"></a>3.探索组件的概念</h2><h3 id="3-1-组件的定义及复用性"><a href="#3-1-组件的定义及复用性" class="headerlink" title="3.1 组件的定义及复用性"></a>3.1 组件的定义及复用性</h3><p> <img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031556849.png" alt="image-20230803152607203"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const app = Vue.createApp(&#123;</span><br><span class="line">      template: `&lt;div&gt;&lt;hello /&gt;&lt;world /&gt;&lt;/div&gt;`,</span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(&#x27;hello&#x27;, &#123;</span><br><span class="line">      template: `&lt;div&gt;hello&lt;/div&gt;`</span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(&#x27;world&#x27;, &#123;</span><br><span class="line">    template: `&lt;div&gt;world&lt;/div&gt;`</span><br><span class="line">    &#125;)    </span><br><span class="line"></span><br><span class="line">    const vm =  app.mount(&#x27;#root&#x27;)</span><br><span class="line">  &lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>组件可以被复用,但不会和其他组件共享</p><p>独享</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031616842.png" alt="image-20230803161654775"></p><p>app.component定义的组件是全局的,不仅在父组件可以用,在其他的组件里也可以用,</p><p>就算不用组件,但仍会挂载到app上,影响性能,使用简单</p><h3 id="3-2-局部组件"><a href="#3-2-局部组件" class="headerlink" title="3.2 局部组件"></a>3.2 局部组件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">  const hello = &#123;</span><br><span class="line">    template: `&lt;div&gt;hello&lt;/div&gt;`</span><br><span class="line">  &#125;</span><br><span class="line">  const counter = &#123;</span><br><span class="line">   data()&#123;</span><br><span class="line">     return&#123;</span><br><span class="line">       count: 1</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   template:   `&lt;div @click = &quot;count += 1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span><br><span class="line"> &#125;</span><br><span class="line">    const app = Vue.createApp(&#123;</span><br><span class="line">      components: &#123;&#x27;counter&#x27;: counter,</span><br><span class="line">                  &#x27;hello&#x27;:hello</span><br><span class="line">                   &#125;,  // counter ES6</span><br><span class="line">      template: `&lt;div&gt;&lt;counter /&gt;&lt;hello /&gt;&lt;/div&gt;`,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const vm = app.mount(&#x27;#root&#x27;)</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>全局组件建议小写字母单词,中间横线连接</p><p>一般将局部组件首字母大写,驼峰命名法: HelloWorld;</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031632348.png" alt="image-20230803163246287"></p><p>可以略写X部分,系统会自动映射,只把组件名写上去也可以</p><p>局部组件:定义了.要注册之后才能使用,性能比较高,使用起来有些麻烦</p><p>局部组件使用时,要做一个名字和组件间的映射印象</p><h3 id="3-3-组件间传值及传值校验"><a href="#3-3-组件间传值及传值校验" class="headerlink" title="3.3 组件间传值及传值校验"></a>3.3 组件间传值及传值校验</h3><p><code>props:[]</code></p><p><strong>动态传参</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const app = Vue.createApp(&#123;</span><br><span class="line">      data()&#123;</span><br><span class="line">        return &#123;num:132&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: `&lt;div&gt;&lt;test :content = &quot;num&quot;/&gt;&lt;/div&gt;`</span><br><span class="line">    &#125;)    </span><br><span class="line">    app.component(&#x27;test&#x27;,&#123;</span><br><span class="line">      props: [&#x27;content&#x27;],</span><br><span class="line">      template:`</span><br><span class="line">        &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm =  app.mount(&#x27;#root&#x27;)</span><br><span class="line">  &lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>通过父组件中的content与data中的num绑定,来实现动态的传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.component(&#x27;test&#x27;,&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    content: String</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>意思是需要传递字符串进来,其他类型会警告</p><p><strong>函数传递</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031731183.png" alt="image-20230803173120103"></p><p>​<strong>其他的参数:</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031732207.png" alt="image-20230803173247168"></p><p>required:需要传值但是没传</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031734583.png" alt="image-20230803173412544"></p><p>default可以是数,也可以是函数,代表不传参的时候显示什么</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308031735607.png" alt="image-20230803173525564"></p><p>需要&lt;1000, &gt;1000会警告</p><h3 id="3-4-单项数据流的理解"><a href="#3-4-单项数据流的理解" class="headerlink" title="3.4 单项数据流的理解"></a>3.4 单项数据流的理解</h3><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308032131494.png" alt="image-20230803213149393"></p><p>这样写太麻烦,可以通过对象来简化</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308032135225.png" alt="image-20230803213528186"></p><p><code>v-bind = “params”</code>等价于 :content &#x3D; “params.content”依次往后</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308032138022.png" alt="image-20230803213821963"></p><p>父组件里面用“-” ,子组件要用驼峰来接收</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308032140887.png" alt="image-20230803214049744"></p><p>这样写会报错</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308032143297.png" alt="image-20230803214321237"></p><p>可以这样写,复制一份数组再修改</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308032144072.png" alt="image-20230803214434014"></p><p>如果子组件改父组件里面的数据,那么其他接收data中的数据也会改变,应该避免数据间的耦合.避免以后潜在的bug</p><h3 id="3-5-Non-Props属性"><a href="#3-5-Non-Props属性" class="headerlink" title="3.5 Non-Props属性"></a>3.5 Non-Props属性</h3><p>​父组件像子组件传值的时候,这些不用的属性该怎么用<img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042035421.png" alt="image-20230804203533322">如果接收参数,那么就会如图所示等价</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042038978.png" alt="image-20230804203806926"></p><p>加上这个,就不会添加msg属性值了</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042040385.png" alt="image-20230804204033308"></p><p><code>$attrs</code>的意思是父组件传的所有值都可以放到这个标签上来</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042041031.png" alt="image-20230804204148993"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042042054.png" alt="image-20230804204230991"></p><h3 id="3-6-父子组件通过事件通信"><a href="#3-6-父子组件通过事件通信" class="headerlink" title="3.6 父子组件通过事件通信"></a>3.6 父子组件通过事件通信</h3><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042050874.png" alt="image-20230804205040790"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042051498.png" alt="image-20230804205117437"></p><p><strong>v-model简化操作</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042101724.png" alt="image-20230804210143645"></p><p>这里的modelValue都是固定的,怒等改编成其他的值</p><p>但如果叫其他值,可以按下面的来写</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308042102990.png" alt="image-20230804210239629"></p><h3 id="3-7-插槽"><a href="#3-7-插槽" class="headerlink" title="3.7 插槽"></a>3.7 插槽</h3><p>如果传递dom或者标签元素时,用props是非常麻烦,这时候就可以采用插槽</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308051245440.png" alt="image-20230805124502379"></p><p>如果父组件想给子组件传递dom元素或者节点时,可以通过插槽来完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const app = Vue.createApp(&#123;</span><br><span class="line">      </span><br><span class="line">      template: `&lt;myform&gt;</span><br><span class="line">         &lt;div&gt;提交&lt;/div&gt;</span><br><span class="line">        &lt;/myform&gt;</span><br><span class="line">        &lt;myform&gt;</span><br><span class="line">          &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/myform&gt;</span><br><span class="line">        `,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(&#x27;myform&#x27;,&#123;</span><br><span class="line">      methods:&#123;</span><br><span class="line">        handleClick()&#123;</span><br><span class="line">          alert(123)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input /&gt;</span><br><span class="line">        &lt;span @click = &quot;handleClick&quot;&gt;</span><br><span class="line">          &lt;slot&gt;&lt;/slot&gt; </span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm = app.mount(&#x27;#root&#x27;)</span><br></pre></td></tr></table></figure><p>但slot不能绑定事件,如果要绑定事件,可以写在被绑定事件的span标签里面</p><ul><li>slot插槽</li><li>slot 中使用的数据,作用域的问题</li><li>父模版里调用的数据属性, 使用的都是父模版里面的数据</li><li>子模版里调用的数据属性,使用的都是子模版里面的数据</li></ul><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308051251218.png" alt="image-20230805125142156"></p><p>如果slot没有接收到元素,会使用中间的默认元素</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308051255773.png" alt="image-20230805125547696"></p><p>template是占位符</p><p><strong>给slot命名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    </span><br><span class="line">    template: `</span><br><span class="line">    &lt;myform&gt;</span><br><span class="line">      &lt;template v-slot:header&gt;</span><br><span class="line">       &lt;div&gt;提交1&lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;button&gt;提交2&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/myform&gt;</span><br><span class="line">      `,</span><br><span class="line">  &#125;)</span><br><span class="line">  app.component(&#x27;myform&#x27;,&#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">      handleClick()&#123;</span><br><span class="line">        alert(123)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span @click = &quot;handleClick&quot;&gt;</span><br><span class="line">        &lt;slot name = &quot;footer&quot;&gt;&lt;/slot&gt; </span><br><span class="line">        &lt;slot name = &quot;header&quot;&gt;&lt;/slot&gt; </span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br><span class="line">  const vm = app.mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p><strong>作用域插槽</strong></p><p>父组件使用子组件里面的数据</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308051339916.png" alt="image-20230805133945833"></p><h3 id="3-8-动态组件和异步组件"><a href="#3-8-动态组件和异步组件" class="headerlink" title="3.8 动态组件和异步组件"></a>3.8 动态组件和异步组件</h3><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>两个组件,实现:点一个组件,另一个组件小时.反之亦然</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308061312887.png" alt="image-20230806130836900"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308061312268.png" alt="image-20230806131217319"></p><h4 id="异步组件-用得少"><a href="#异步组件-用得少" class="headerlink" title="异步组件(用得少)"></a>异步组件(用得少)</h4><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308061316337.png" alt="image-20230806131626259"></p><ul><li>根据数据的变化,结合component这个标签, 来随时动态切换组件的现实</li><li>异步组件:是异步执行某些组件的逻辑,这叫做异步组件</li></ul><h3 id="3-9-基础语法知识点查缺补漏"><a href="#3-9-基础语法知识点查缺补漏" class="headerlink" title="3.9 基础语法知识点查缺补漏"></a>3.9 基础语法知识点查缺补漏</h3><p><strong>v-once</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308061501613.png" alt="image-20230806150110546"></p><p><strong>ref</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308061505195.png" alt="image-20230806150502129"></p><p><strong>provide &#x2F; inject</strong></p><p>解决多层值的传递</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308061509364.png" alt="image-20230806150918260"></p><h2 id="4-动画"><a href="#4-动画" class="headerlink" title="4. 动画"></a>4. 动画</h2><h4 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h4><p> 一个简单的动画形式</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071647566.png" alt="image-20230807164657444"></p><p>用Vue来控制</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071648045.png" alt="image-20230807164817981"></p><p><strong>过渡效果</strong></p><p>背景切换的一个操作</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071651110.png" alt="image-20230807165144060"></p><p>transition表示背景切换,3s缓慢变动</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071653304.png" alt="image-20230807165347203"></p><p><strong>带点Vue特色来实现</strong></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071659956.png" alt="image-20230807165929874"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071701963.png" alt="image-20230807170129879"></p><p>其实和原生js并没有太大区别,只是从面向dom到面向数据</p><h4 id="使用单元素组件实现过渡"><a href="#使用单元素组件实现过渡" class="headerlink" title="使用单元素组件实现过渡"></a>使用单元素组件实现过渡</h4><p>使用transition标签来实现入场和出场动画</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071709596.png" alt="image-20230807170928536"></p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071713080.png" alt="image-20230807171307031"></p><p>对v-重命名</p><p><img src="https://gitee.com/coderlyj916/picture/raw/master/img/202308071715562.png" alt="image-20230807171531515"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;Vue3&quot;&gt;&lt;a href=&quot;#Vue3&quot; class=&quot;headerlink&quot; title=&quot;Vue3&quot;&gt;&lt;/a&gt;Vue3&lt;/h1&gt;&lt;h2 id=&quot;1-vue语法初探</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue3" scheme="http://example.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>有序数组的平方</title>
    <link href="http://example.com/2023/07/30/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
    <id>http://example.com/2023/07/30/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</id>
    <published>2023-07-30T15:04:11.000Z</published>
    <updated>2023-07-30T15:09:26.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">977. 有序数组的平方</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>首先这道题可以直接用暴力,for循环.加一个函数方法sort<br>但会提高实践复杂度,用双指针会优化</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>因为非递减数组,在两边的平方要么是最大,要么是最小,一定是在两边,所以这时候可以用双指针,在数组两边定义两个指针,当左边的平方小于右边的平方,就往一个新数组放,放在最大索引处,然后左边++,同理,右边–.直到左边小于右边</p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li>时间复杂度: <blockquote><p>$O(n)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res[i] *= nums[i];</span><br><span class="line">        &#125;                   </span><br><span class="line">        Arrays.sort(res) ;<span class="comment">//如果递减就  Arrays.sort(a, Collections.reverseOrder());</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> []res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length]; <span class="comment">//递增存到新数组中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> nums.length-<span class="number">1</span>; <span class="comment">//新数组的索引</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length-<span class="number">1</span>; l &lt;= r; )&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l]*nums[l] &lt;= nums[r]*nums[r]) &#123;</span><br><span class="line">                 res[k--] = nums[r]*nums[r];</span><br><span class="line">                 r --;</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res[k--] = nums[l]*nums[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/squares-of-a-sorted-array/description/&quot;&gt;977. 有序数组的平方&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="双指针" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>移除元素</title>
    <link href="http://example.com/2023/07/29/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2023/07/29/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</id>
    <published>2023-07-29T14:22:09.000Z</published>
    <updated>2023-07-29T14:24:45.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/remove-element/description/">27. 移除元素</a></p></blockquote><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>首先可以用暴力,两层for循环.但O(n^2)<br>快慢双指针:通过两个指针,来对数组进行处理</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><blockquote><p>首先定义一个慢指针si,然后再循环中定义一个快指针fi,然后通过判断fi和val1是否相等,如果相等,说明这个值要被覆盖,所以慢指针停止,快指针向后,直到快指针和对应的val2不相等,就可一将这个值覆盖到val1的位置上,然后将<code>si++</code>,直到遍历完整个数组</p></blockquote><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p>$O(n)$</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p>$O(1)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义快指针和慢指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">si</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//慢指针,快指针因为要不断更新,所以要在for中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="number">0</span>; fi &lt; nums.length; fi++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fi] != val)&#123; <span class="comment">//慢指针更新的条件</span></span><br><span class="line">                nums[si++] = nums[fi]; <span class="comment">// 将符合条件的元素往不符合条件的元素覆盖</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> si;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Problem: &lt;a href=&quot;https://leetcode.cn/problems/remove-element/description/&quot;&gt;27. 移除元素&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="双指针" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
